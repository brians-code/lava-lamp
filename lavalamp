#!/bin/bash
projects="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $projects/.private
dev=$projects/dev
prod=$projects/prod
cloud9=$projects/cloud9
mkdir dev
mkdir prod


function create () {
    # Usage: create project-name
    # Note that project-name needs to match the github repo name
    project=$1
    git clone https://$github_password@github.com/$github_username/$project $dev/$project
}


function launch () {
    # Usage: launch project-name [environment-name]
    # Creates instance of cloud9 editor attached to projects/dev/project-name
    
    # Validate    
    _valid_project $@ || return 1

    # Update cloud9 symlink and start/restart container
    # Using docker-compose down would delete the cloud9 container, which might have a customized dev environment
    rm $cloud9
    ln -s $projects/$dev/$project $cloud9
    CLOUD9=$cloud9 MYUID=$UID docker-compose -f nginx-proxy.yml -f cloud9.yml up -d
    docker restart cloud9
}


function crash () {
    # Usage: crash project-name
    # Warning: This will stop and remove all services associated with project, including prod
    # To stop and remove a single service, use 'land project-name environment-name'
    
    # Validate
    _valid_project $@ || return 1

    # Stop/Remove service(s)
    COMPOSE_PROJECT_NAME=$1 docker-compose down -v
}


function land () {
    # Usage: land project-name environment-name

    # Stop and remove container
    container=$1
    if [ $# -eq 2 ]
    then
      container=$1-$2
    fi
    docker rm -fv $container
}


function deploy () {
    # Validate
    _valid_project $@ || return 1

    # Update/Create git repo
    # Pulls the most recent tag, no history or branches
    # More secure and saves space
    local=$prod/$project
    origin=$dev/$project
    mkdir -p $local
    if [ ! -d $local/.git ]
    then
      git -C $local init
      git -C $local remote add origin $origin
    fi
    git -C $local fetch --tags --depth 1
    if [ ! $(_latest_origin_tag $local) ]
    then
        echo "No tags found, creating v0.0.1"
        git -C $remote tag -a v0.0.1 -m "Tag created by deploy script"
        git -C $local fetch --tags --depth 1
    fi
    git -C $local checkout -q $(_latest_origin_tag $local)
    echo $'PROD is now set to version '$(git -C $local describe --tags)
}


# Removes stopped containers, unattached volumes, and unused untagged images
function docker-clean () {
    docker rm -v $(docker ps -a -q)
    docker volume rm $(docker volume ls -qf dangling=true)
    docker images --quiet --filter=dangling=true | xargs --no-run-if-empty docker rmi
}


function _latest_origin_tag () {
    echo $(git -C $1 describe --tags $(git -C $1 rev-list origin/master --tags --walk-reflogs --max-count=1))
}


function _valid_project () {
    if [ $# -eq 0 ]
    then
      echo 'Error: Project name missing.'
      return 1
    elif [ ! -d $dev/$1 ]
    then
      echo 'Error: Project '$1' does not exist.'
      return 1
    fi
    project=$1
    return 0
}


# This is only here to make COMPOSE_PROJECT_NAME autocomplete
function COMPOSE_PROJECT_NAME () {
    return 0
}
