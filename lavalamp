#!/bin/bash
source ~/projects/.config
source ~/projects/.private


function lltest () {
    echo $dev/$1
}


function clone () {
    ### Validate
    if [ $# -eq 0 ]
    then
      echo $'Error: Project not found.\nUsage: create [PROJECT]'
      exit 1
    elif [ $# -gt 1 ]
    then
      echo $'Error: Too many args.\nUsage: create [PROJECT]'    
      exit 1
    fi
    
    
    ### Create project
    # TODO make github clone optional
    project=$1
    git clone https://$github_password@github.com/$github_username/$project $dev/$project/$web


    return 0
}


function deploy () {
    ### Validate
    # TODO Make optional args -d -p -e
    # TODO Lock paths to base lava-lamp directory or execute from pwd?
    if [ $# -eq 0 ]
    then
      echo $'Error: Project not found.\nUsage: deploy [PROJECT]'
      exit 0
    elif [ $# -gt 1 ]
    then
      echo $'Error: Too many args.\nUsage: deploy [PROJECT]'    
      exit 0
    fi


    ### Update/Create git repo
    # TODO allow dev and prod to be remote
    # Pulls the most recent tag, no history or branches
    # More secure and saves space
    project=$1
    local=$prod/$project/$web
    origin=$dev/$project/$web
    mkdir -p $prod/$project/$data
    mkdir -p $local
    if [ ! -d $local/.git ]
    then
      git -C $local init
      git -C $local remote add origin $origin
    fi
    git -C $local fetch --tags --depth 1
    if [ ! $(_latest_origin_tag $local) ]
    then
        echo "No tags found, creating v0.0.1"
        git -C $remote tag -a v0.0.1 -m "Tag created by deploy script"
        git -C $local fetch --tags --depth 1
    fi
    git -C $local checkout -q $(_latest_origin_tag $local)
    echo $'PROD is now set to version '$(git -C $local describe --tags)


    ### Import/Create environment file if none present
    if [ ! -f $local/$env ]
    then
      echo $'PROD=true\nVERSION='$tag > $local/$env
    fi

    return 0
}


function _latest_origin_tag () {
    echo $(git -C $1 describe --tags $(git -C $1 rev-list origin/master --tags --walk-reflogs --max-count=1))
}
